From d828de2f7bffa0597783ce763c6ae541e9a6a0a5 Mon Sep 17 00:00:00 2001
From: blackrebel <72fabio1@virgilio.it>
Date: Tue, 5 Jun 2018 11:27:54 +0200
Subject: [PATCH 06/18] [MTK] Add MTK code for libaudio

---
 include/media/AudioSystem.h                 | 29 +++++++++++++
 include/media/IAudioFlinger.h               |  9 ++++
 include/media/IAudioPolicyService.h         |  5 +++
 media/libmedia/AudioSystem.cpp              | 58 +++++++++++++++++++++++++
 media/libmedia/IAudioFlinger.cpp            | 67 +++++++++++++++++++++++++++++
 media/libmedia/IAudioPolicyService.cpp      | 17 ++++++++
 services/audioflinger/Android.mk            |  7 +++
 services/audioflinger/AudioFlinger.cpp      | 47 ++++++++++++++++++++
 services/audioflinger/AudioFlinger.h        |  6 +++
 services/audiopolicy/AudioPolicyService.cpp | 12 ++++++
 services/audiopolicy/AudioPolicyService.h   |  3 ++
 11 files changed, 260 insertions(+)

diff --git a/include/media/AudioSystem.h b/include/media/AudioSystem.h
index 698bf2eec..d06f1249c 100644
--- a/include/media/AudioSystem.h
+++ b/include/media/AudioSystem.h
@@ -43,6 +43,35 @@ public:
     /* These are static methods to control the system-wide AudioFlinger
      * only privileged processes can have access to them
      */
+#ifdef MTK_HARDWARE
+    static int xWayPlay_Start(int sample_rate);
+    static int xWayPlay_Stop(void);
+    static int xWayPlay_Write(void *buffer, int size_bytes);
+    static int xWayPlay_GetFreeBufferCount(void);
+    static int xWayRec_Start(int sample_rate);
+    static int xWayRec_Stop(void);
+    static int xWayRec_Read(void *buffer, int size_bytes);
+
+    //add by wendy
+    static int ReadRefFromRing(void*buf, uint32_t datasz,void* DLtime);
+    static int GetVoiceUnlockULTime(void* DLtime);
+    static int SetVoiceUnlockSRC(uint outSR, uint outChannel);
+    static bool startVoiceUnlockDL();
+    static bool stopVoiceUnlockDL();
+    static void freeVoiceUnlockDLInstance();
+    static bool getVoiceUnlockDLInstance();
+    static int GetVoiceUnlockDLLatency();
+
+    //add . for AM mode set/get  parameters
+    static status_t GetEMParameter(void *ptr,size_t len);
+    static status_t SetEMParameter(void *ptr,size_t len);
+    static status_t SetAudioCommand(int par1,int par2);
+    static status_t GetAudioCommand(int par1, int *par2);
+    static status_t SetAudioData(int par1,size_t len, void *ptr);
+    static status_t GetAudioData(int par1,size_t len,void *ptr);
+    static status_t SetACFPreviewParameter(void *ptr,size_t len);
+    static status_t SetHCFPreviewParameter(void *ptr,size_t len);
+#endif
 
     // mute/unmute microphone
     static status_t muteMicrophone(bool state);
diff --git a/include/media/IAudioFlinger.h b/include/media/IAudioFlinger.h
index 54be5f38d..9b799f329 100644
--- a/include/media/IAudioFlinger.h
+++ b/include/media/IAudioFlinger.h
@@ -258,6 +258,15 @@ public:
 
     /* Get the HW synchronization source used for an audio session */
     virtual audio_hw_sync_t getAudioHwSyncForSession(audio_session_t sessionId) = 0;
+
+#ifdef MTK_HARDWARE
+	// Interfaces mtk added 
+    virtual status_t SetAudioCommand(int parameters1, int parameter2) = 0;
+    virtual status_t GetAudioCommand(int parameters1) = 0;
+    virtual status_t SetAudioData(int par1,size_t len,void *ptr)=0;
+    virtual status_t GetAudioData(int par1,size_t len,void *ptr)=0;
+
+#endif
 };
 
 
diff --git a/include/media/IAudioPolicyService.h b/include/media/IAudioPolicyService.h
index 134dd197a..db8b9e9f5 100644
--- a/include/media/IAudioPolicyService.h
+++ b/include/media/IAudioPolicyService.h
@@ -153,6 +153,11 @@ public:
     virtual audio_mode_t getPhoneState() = 0;
 
     virtual status_t registerPolicyMixes(Vector<AudioMix> mixes, bool registration) = 0;
+
+#ifdef MTK_HARDWARE
+    virtual status_t SetPolicyManagerParameters(int par1,int par2 ,int par3,int par4) = 0;
+#endif
+
 };
 
 
diff --git a/media/libmedia/AudioSystem.cpp b/media/libmedia/AudioSystem.cpp
index 9cae21c68..005547cd3 100644
--- a/media/libmedia/AudioSystem.cpp
+++ b/media/libmedia/AudioSystem.cpp
@@ -999,4 +999,62 @@ void AudioSystem::AudioPolicyServiceClient::onAudioPatchListUpdate()
     }
 }
 
+#ifdef MTK_HARDWARE
+status_t AudioSystem::SetAudioCommand(int par1,int par2)
+{
+    ALOGD("AudioSystem::SetAudioCommand");
+    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
+    if (af == 0)
+    {
+        ALOGE("AudioSystem::SetAudioCommand Error!! PERMISSION_DENIED");
+        return PERMISSION_DENIED;
+    }
+    return af->SetAudioCommand(par1,par2);
+
+    return OK;   
+}
+
+status_t AudioSystem::GetAudioCommand(int par1,int* par2)
+{  
+    ALOGD("AudioSystem::GetAudioCommand");
+    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
+    if (af == 0)
+    {
+        ALOGE("AudioSystem::GetAudioCommand Error!! PERMISSION_DENIED");
+        return PERMISSION_DENIED;
+    }  
+    *par2 =  af->GetAudioCommand(par1);
+    return NO_ERROR;
+}
+
+status_t AudioSystem::SetAudioData(int par1,size_t byte_len,void *ptr)
+{
+
+    ALOGD("SetAudioData");
+    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
+    if (af == 0)
+    {
+        ALOGE("AudioSystem::SetAAudioData Error!! PERMISSION_DENIED");
+        return PERMISSION_DENIED;
+    }
+    return af->SetAudioData(par1,byte_len,ptr);
+
+    return OK;  
+}
+
+status_t AudioSystem::GetAudioData(int par1,size_t byte_len,void *ptr)
+{
+
+    ALOGD("GetAudioData");
+    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
+    if (af == 0)
+    {
+        ALOGE("AudioSystem::GetAAudioData Error!! PERMISSION_DENIED");
+        return PERMISSION_DENIED;
+    }   
+    return af->GetAudioData(par1,byte_len,ptr);
+
+    return OK;  
+}
+#endif
 }; // namespace android
diff --git a/media/libmedia/IAudioFlinger.cpp b/media/libmedia/IAudioFlinger.cpp
index 3f76506a2..980208976 100644
--- a/media/libmedia/IAudioFlinger.cpp
+++ b/media/libmedia/IAudioFlinger.cpp
@@ -85,6 +85,31 @@ enum {
 #ifdef QCOM_DIRECTTRACK
     CREATE_DIRECT_TRACK,
 #endif
+#ifdef MTK_HARDWARE
+	GET_EM_PARAMETER  = 0x7FFF0000,  //Don't call by CTS for security
+	SET_EM_PARAMETER,
+	SET_AUDIO_COMMAND,
+	GET_AUDIO_COMMAND,
+	SET_AUDIO_DATA,
+	GET_AUDIO_DATA,
+	SET_ACF_PREVIEW_PARAMETER,
+	SET_HCF_PREVIEW_PARAMETER,
+	PCM_PLAY_START,
+	PCM_PLAY_STOP,
+	PCM_PLAY_WEITE,
+	PCM_PLAY_GET_FREE_BUFFER_SIZE,
+	PCM_RECORD_START,
+	PCM_RECORD_STOP,
+	PCM_RECORD_READ,
+	Read_Ref_FromRing,
+	Get_Voice_Unlock_ULTime,
+	Set_Voice_Unlock_SRC,
+	start_Voice_Unlock_DL,
+	stop_Voice_Unlock_DL,
+	free_Voice_Unlock_DL_Instance,
+	get_Voice_Unlock_DL_Instance,
+	Get_Voice_Unlock_DL_Latency
+#endif
 };
 
 #define MAX_ITEMS_PER_LIST 1024
@@ -944,6 +969,48 @@ public:
         }
         return (audio_hw_sync_t)reply.readInt32();
     }
+
+#ifdef MTK_HARDWARE
+    virtual status_t SetAudioCommand(int var1,int var2)
+    {
+        Parcel data, reply;
+        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
+        data.writeInt32(var1);
+        data.writeInt32(var2);
+        remote()->transact(SET_AUDIO_COMMAND, data, &reply);
+        return  reply.readInt32();
+    }
+    virtual status_t GetAudioCommand(int var1)
+    {
+        Parcel data, reply;
+        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
+        data.writeInt32(var1);
+        remote()->transact(GET_AUDIO_COMMAND, data, &reply);
+        return  reply.readInt32();
+    }
+    virtual status_t SetAudioData(int par1, size_t len,void *ptr)
+    {
+        Parcel data, reply;
+        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
+        data.writeInt32(par1);
+        data.writeInt32(len);
+        data.write(ptr,len);
+        remote()->transact(SET_AUDIO_DATA, data, &reply);
+        reply.read(ptr, len);
+        return OK;
+    }
+    virtual status_t GetAudioData(int par1,size_t len,void *ptr)
+    {
+        Parcel data, reply;
+        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
+        data.writeInt32(par1);
+        data.writeInt32(len);
+        data.write(ptr,len);
+        remote()->transact(GET_AUDIO_DATA, data, &reply);
+        reply.read(ptr, len);
+        return OK;
+    }
+#endif
 };
 
 IMPLEMENT_META_INTERFACE(AudioFlinger, "android.media.IAudioFlinger");
diff --git a/media/libmedia/IAudioPolicyService.cpp b/media/libmedia/IAudioPolicyService.cpp
index 9d1ecd7ac..c523c2e5e 100644
--- a/media/libmedia/IAudioPolicyService.cpp
+++ b/media/libmedia/IAudioPolicyService.cpp
@@ -71,6 +71,9 @@ enum {
     RELEASE_SOUNDTRIGGER_SESSION,
     GET_PHONE_STATE,
     REGISTER_POLICY_MIXES,
+#ifdef MTK_HARDWARE
+    SET_POLICYMANAGER_PARAMETERS
+#endif
 };
 
 #define MAX_ITEMS_PER_LIST 1024
@@ -492,6 +495,20 @@ public:
         return status;
     }
 
+#ifdef MTK_HARDWARE
+    virtual status_t SetPolicyManagerParameters(int par1,int par2 ,int par3,int par4)
+    {
+        Parcel data, reply;
+        data.writeInterfaceToken(IAudioPolicyService::getInterfaceDescriptor());
+        data.writeInt32(par1);
+        data.writeInt32(par2);
+        data.writeInt32(par3);
+        data.writeInt32(par4);
+        remote()->transact(SET_POLICYMANAGER_PARAMETERS, data, &reply);
+        return static_cast <status_t> (reply.readInt32());
+    }
+#endif
+
     virtual bool isOffloadSupported(const audio_offload_info_t& info)
     {
         Parcel data, reply;
diff --git a/services/audioflinger/Android.mk b/services/audioflinger/Android.mk
index 4eb13a316..e7a8340bb 100644
--- a/services/audioflinger/Android.mk
+++ b/services/audioflinger/Android.mk
@@ -93,6 +93,9 @@ endif
 endif
 #QTI Resampler
 
+ifeq ($(BOARD_HAS_MTK_HARDWARE),true)
+    LOCAL_SHARED_LIBRARIES += libblisrc
+endif
 LOCAL_MODULE:= libaudioflinger
 LOCAL_32_BIT_ONLY := true
 
@@ -154,6 +157,10 @@ LOCAL_SHARED_LIBRARIES := \
     libutils \
     liblog
 
+ifeq ($(BOARD_HAS_MTK_HARDWARE),true)
+    LOCAL_SHARED_LIBRARIES += libblisrc
+endif
+
 LOCAL_MODULE:= test-resample
 
 LOCAL_MODULE_TAGS := optional
diff --git a/services/audioflinger/AudioFlinger.cpp b/services/audioflinger/AudioFlinger.cpp
index ad7c301c7..a3c8c2538 100644
--- a/services/audioflinger/AudioFlinger.cpp
+++ b/services/audioflinger/AudioFlinger.cpp
@@ -176,6 +176,53 @@ const char *formatToString(audio_format_t format) {
     return "unknown";
 }
 
+#ifdef MTK_HARDWARE
+status_t AudioFlinger::SetAudioData(int par1,size_t len,void *ptr)
+{
+    ALOGV("SetAudioData par1 = %d,len = %d ",par1,len);
+    AutoMutex lock(mHardwareLock);
+    audio_hw_device_t *dev = mPrimaryHardwareDev->hwDevice();
+    mHardwareStatus = AUDIO_HW_SET_PARAMETER;
+    dev->SetAudioData(dev,par1,len,ptr);
+    mHardwareStatus = AUDIO_HW_IDLE;
+    return NO_ERROR;
+}
+
+status_t AudioFlinger::GetAudioData(int par1,size_t len,void *ptr)
+{
+    ALOGV("GetAudioData par1 = %d,len = %d ",par1,len);
+    AutoMutex lock(mHardwareLock);
+    audio_hw_device_t *dev = mPrimaryHardwareDev->hwDevice();
+    mHardwareStatus = AUDIO_HW_SET_PARAMETER;
+    dev->GetAudioData(dev,par1,len,ptr);
+    mHardwareStatus = AUDIO_HW_IDLE;
+    return NO_ERROR;
+}
+
+status_t AudioFlinger::SetAudioCommand(int parameters1,int parameters2)
+{
+    ALOGV("SetAudioCommand par1 = %d,par2 = %d ",parameters1,parameters2);
+    AutoMutex lock(mHardwareLock);
+    audio_hw_device_t *dev = mPrimaryHardwareDev->hwDevice();
+    mHardwareStatus = AUDIO_HW_SET_PARAMETER;
+    dev->SetAudioCommand(dev,parameters1,parameters2);
+    mHardwareStatus = AUDIO_HW_IDLE;
+    return NO_ERROR;
+}
+
+status_t AudioFlinger::GetAudioCommand(int parameters1)
+{
+    ALOGV("GetAudioCommand par1 = %d",parameters1);
+    int value =0;
+    AutoMutex lock(mHardwareLock);
+    audio_hw_device_t *dev = mPrimaryHardwareDev->hwDevice();
+    mHardwareStatus = AUDIO_HW_SET_PARAMETER;
+    value =dev->GetAudioCommand(dev,parameters1);
+    mHardwareStatus = AUDIO_HW_IDLE;
+    return value;
+}
+#endif
+
 static int load_audio_interface(const char *if_name, audio_hw_device_t **dev)
 {
     const hw_module_t *mod;
diff --git a/services/audioflinger/AudioFlinger.h b/services/audioflinger/AudioFlinger.h
index 5d1538dcc..f960c16e8 100644
--- a/services/audioflinger/AudioFlinger.h
+++ b/services/audioflinger/AudioFlinger.h
@@ -124,6 +124,12 @@ class AudioFlinger :
 public:
     static const char* getServiceName() ANDROID_API { return "media.audio_flinger"; }
 
+#ifdef MTK_HARDWARE
+    virtual status_t SetAudioData(int par1,size_t len,void *ptr);
+    virtual status_t GetAudioData(int par1,size_t len,void *ptr);
+    virtual status_t SetAudioCommand(int parameters1,int parameters2);
+    virtual status_t GetAudioCommand(int parameters1);
+#endif
     virtual     status_t    dump(int fd, const Vector<String16>& args);
 
     // IAudioFlinger interface, in binder opcode order
diff --git a/services/audiopolicy/AudioPolicyService.cpp b/services/audiopolicy/AudioPolicyService.cpp
index 30794541b..cd033c97f 100644
--- a/services/audiopolicy/AudioPolicyService.cpp
+++ b/services/audiopolicy/AudioPolicyService.cpp
@@ -276,6 +276,18 @@ void AudioPolicyService::setPowerHint(bool active) {
     }
 }
 
+#ifdef MTK_HARDWARE
+status_t AudioPolicyService::SetPolicyManagerParameters(int par1, int par2, int par3 , int par4)
+{
+    if (mpAudioPolicy == NULL) {
+        return 0;
+    }
+    //SetPolicyManagerParameters no need to hold mlock.
+    //Mutex::Autolock _l(mLock);
+    return mpAudioPolicy->set_policy_parameters(mpAudioPolicy, par1, par2,par3,par4);
+}
+#endif
+
 static bool tryLock(Mutex& mutex)
 {
     bool locked = false;
diff --git a/services/audiopolicy/AudioPolicyService.h b/services/audiopolicy/AudioPolicyService.h
index fe2a3f657..32dc6f2ef 100644
--- a/services/audiopolicy/AudioPolicyService.h
+++ b/services/audiopolicy/AudioPolicyService.h
@@ -129,6 +129,9 @@ public:
     virtual bool isStreamActive(audio_stream_type_t stream, uint32_t inPastMs = 0) const;
     virtual bool isStreamActiveRemotely(audio_stream_type_t stream, uint32_t inPastMs = 0) const;
     virtual bool isSourceActive(audio_source_t source) const;
+#ifdef MTK_HARDWARE
+    virtual status_t SetPolicyManagerParameters(int par1, int par2, int par3 , int par4);
+#endif
 
     virtual status_t queryDefaultPreProcessing(int audioSession,
                                               effect_descriptor_t *descriptors,
-- 
2.15.1

