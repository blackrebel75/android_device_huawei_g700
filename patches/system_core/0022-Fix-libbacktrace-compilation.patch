From 36668b6897673a50701a27e0487a4a034a0bef23 Mon Sep 17 00:00:00 2001
From: blackrebel <72fabio1@virgilio.it>
Date: Tue, 26 Dec 2017 02:26:41 +0100
Subject: [PATCH 22/27] Fix libbacktrace compilation

---
 libbacktrace/Android.mk          |  4 +---
 libbacktrace/BacktraceImpl.cpp   | 15 +++++++++++++
 libbacktrace/BacktraceThread.cpp | 46 +++++++++++++---------------------------
 libbacktrace/BacktraceThread.h   |  9 +++-----
 libbacktrace/backtrace_test.cpp  | 17 +++++----------
 5 files changed, 39 insertions(+), 52 deletions(-)

diff --git a/libbacktrace/Android.mk b/libbacktrace/Android.mk
index 06b8c19a..d2196b10 100755
--- a/libbacktrace/Android.mk
+++ b/libbacktrace/Android.mk
@@ -75,6 +75,7 @@ libbacktrace_src_files += \
 libbacktrace_c_includes := \
 	system/core/libcorkscrew \
 
+	
 libbacktrace_shared_libraries := \
 	libcorkscrew \
 
@@ -131,9 +132,6 @@ libbacktrace_libc++_shared_libraries_host := \
 libbacktrace_libc++_static_libraries_host := \
 	libcutils \
 
-libbacktrace_libc++_ldlibs_host := \
-	-lpthread \
-	-lrt \
 
 libbacktrace_libc++_libc++ := true
 
diff --git a/libbacktrace/BacktraceImpl.cpp b/libbacktrace/BacktraceImpl.cpp
index 46936007..a4173a6a 100644
--- a/libbacktrace/BacktraceImpl.cpp
+++ b/libbacktrace/BacktraceImpl.cpp
@@ -60,8 +60,23 @@ bool Backtrace::Unwind(size_t num_ignore_frames, ucontext_t* ucontext) {
   return impl_->Unwind(num_ignore_frames, ucontext);
 }
 
+extern "C" char* __cxa_demangle(const char* mangled, char* buf, size_t* len,
+                                int* status);
 std::string Backtrace::GetFunctionName(uintptr_t pc, uintptr_t* offset) {
   std::string func_name = impl_->GetFunctionNameRaw(pc, offset);
+  if (!func_name.empty()) {
+#if defined(__APPLE__)
+    // Mac OS' __cxa_demangle demangles "f" as "float"; last tested on 10.7.
+    if (func_name[0] != '_') {
+      return func_name;
+    }
+#endif
+    char* name = __cxa_demangle(func_name.c_str(), 0, 0, 0);
+    if (name) {
+      func_name = name;
+      free(name);
+    }
+  }
   return func_name;
 }
 
diff --git a/libbacktrace/BacktraceThread.cpp b/libbacktrace/BacktraceThread.cpp
index 439cc3bd..a266023e 100644
--- a/libbacktrace/BacktraceThread.cpp
+++ b/libbacktrace/BacktraceThread.cpp
@@ -17,15 +17,14 @@
 #include <errno.h>
 #include <inttypes.h>
 #include <limits.h>
+#include <linux/futex.h>
 #include <pthread.h>
 #include <signal.h>
-#include <stdlib.h>
 #include <string.h>
 #include <sys/syscall.h>
 #include <sys/time.h>
 #include <sys/types.h>
 #include <ucontext.h>
-#include <unistd.h>
 
 #include <cutils/atomic.h>
 
@@ -33,6 +32,9 @@
 #include "BacktraceThread.h"
 #include "thread_utils.h"
 
+static inline int futex(volatile int* uaddr, int op, int val, const struct timespec* ts, volatile int* uaddr2, int val3) {
+  return syscall(__NR_futex, uaddr, op, val, ts, uaddr2, val3);
+}
 //-------------------------------------------------------------------------
 // ThreadEntry implementation.
 //-------------------------------------------------------------------------
@@ -42,13 +44,7 @@ pthread_mutex_t ThreadEntry::list_mutex_ = PTHREAD_MUTEX_INITIALIZER;
 // Assumes that ThreadEntry::list_mutex_ has already been locked before
 // creating a ThreadEntry object.
 ThreadEntry::ThreadEntry(pid_t pid, pid_t tid)
-    : pid_(pid), tid_(tid), ref_count_(1), mutex_(PTHREAD_MUTEX_INITIALIZER),
-      wait_mutex_(PTHREAD_MUTEX_INITIALIZER), wait_value_(0),
-      next_(ThreadEntry::list_), prev_(NULL) {
-  pthread_condattr_t attr;
-  pthread_condattr_init(&attr);
-  pthread_condattr_setclock(&attr, CLOCK_MONOTONIC);
-  pthread_cond_init(&wait_cond_, &attr);
+    : pid_(pid), tid_(tid), futex_(0), ref_count_(1), mutex_(PTHREAD_MUTEX_INITIALIZER), next_(ThreadEntry::list_), prev_(NULL) {
 
   // Add ourselves to the list.
   if (ThreadEntry::list_) {
@@ -104,34 +100,22 @@ ThreadEntry::~ThreadEntry() {
   next_ = NULL;
   prev_ = NULL;
 
-  pthread_cond_destroy(&wait_cond_);
 }
 
 void ThreadEntry::Wait(int value) {
   timespec ts;
-  if (clock_gettime(CLOCK_MONOTONIC, &ts) == -1) {
-    BACK_LOGW("clock_gettime failed: %s", strerror(errno));
-    abort();
-  }
-  ts.tv_sec += 10;
-
-  pthread_mutex_lock(&wait_mutex_);
-  while (wait_value_ != value) {
-    int ret = pthread_cond_timedwait(&wait_cond_, &wait_mutex_, &ts);
-    if (ret != 0) {
-      BACK_LOGW("pthread_cond_timedwait failed: %s", strerror(ret));
-      break;
-    }
+  ts.tv_sec = 10;
+  ts.tv_nsec = 0;
+  errno = 0;
+  futex(&futex_, FUTEX_WAIT, value, &ts, NULL, 0);
+  if (errno != 0 && errno != EWOULDBLOCK) {
+    BACK_LOGW("futex wait failed, futex = %d: %s", futex_, strerror(errno));
   }
-  pthread_mutex_unlock(&wait_mutex_);
 }
 
 void ThreadEntry::Wake() {
-  pthread_mutex_lock(&wait_mutex_);
-  wait_value_++;
-  pthread_mutex_unlock(&wait_mutex_);
-
-  pthread_cond_signal(&wait_cond_);
+  futex_++;
+  futex(&futex_, FUTEX_WAKE, INT_MAX, NULL, NULL, 0);
 }
 
 void ThreadEntry::CopyUcontextFromSigcontext(void* sigcontext) {
@@ -159,7 +143,7 @@ static void SignalHandler(int, siginfo_t*, void* sigcontext) {
 
   // Pause the thread until the unwind is complete. This avoids having
   // the thread run ahead causing problems.
-  entry->Wait(2);
+  entry->Wait(1);
 
   ThreadEntry::Remove(entry);
 }
@@ -211,7 +195,7 @@ bool BacktraceThread::Unwind(size_t num_ignore_frames, ucontext_t* ucontext) {
   }
 
   // Wait for the thread to get the ucontext.
-  entry->Wait(1);
+  entry->Wait(0);
 
   // After the thread has received the signal, allow other unwinders to
   // continue.
diff --git a/libbacktrace/BacktraceThread.h b/libbacktrace/BacktraceThread.h
index 99a86387..5e9d34c9 100644
--- a/libbacktrace/BacktraceThread.h
+++ b/libbacktrace/BacktraceThread.h
@@ -49,9 +49,8 @@ public:
   inline void Lock() {
     pthread_mutex_lock(&mutex_);
 
-    // Always reset the wait value since this could be the first or nth
-    // time this entry is locked.
-    wait_value_ = 0;
+    // Reset the futex value in case of multiple unwinds of the same thread.
+    futex_ = 0;
   }
 
   inline void Unlock() {
@@ -68,11 +67,9 @@ private:
 
   pid_t pid_;
   pid_t tid_;
+  int futex_;
   int ref_count_;
   pthread_mutex_t mutex_;
-  pthread_mutex_t wait_mutex_;
-  pthread_cond_t wait_cond_;
-  int wait_value_;
   ThreadEntry* next_;
   ThreadEntry* prev_;
   ucontext_t ucontext_;
diff --git a/libbacktrace/backtrace_test.cpp b/libbacktrace/backtrace_test.cpp
index 8002ed6b..ed6b2111 100644
--- a/libbacktrace/backtrace_test.cpp
+++ b/libbacktrace/backtrace_test.cpp
@@ -51,7 +51,7 @@
 #define NS_PER_SEC              1000000000ULL
 
 // Number of simultaneous dumping operations to perform.
-#define NUM_THREADS  40
+#define NUM_THREADS  20
 
 // Number of simultaneous threads running in our forked process.
 #define NUM_PTRACE_THREADS 5
@@ -486,13 +486,6 @@ TEST(libbacktrace, thread_level_trace) {
   struct sigaction new_action;
   ASSERT_TRUE(sigaction(THREAD_SIGNAL, NULL, &new_action) == 0);
   EXPECT_EQ(cur_action.sa_sigaction, new_action.sa_sigaction);
-  // The SA_RESTORER flag gets set behind our back, so a direct comparison
-  // doesn't work unless we mask the value off. Mips doesn't have this
-  // flag, so skip this on that platform.
-#ifdef SA_RESTORER
-  cur_action.sa_flags &= ~SA_RESTORER;
-  new_action.sa_flags &= ~SA_RESTORER;
-#endif
   EXPECT_EQ(cur_action.sa_flags, new_action.sa_flags);
 }
 
@@ -590,7 +583,7 @@ TEST(libbacktrace, thread_multiple_dump) {
 
   // Wait for tids to be set.
   for (std::vector<thread_t>::iterator it = runners.begin(); it != runners.end(); ++it) {
-    ASSERT_TRUE(WaitForNonZero(&it->state, 30));
+    ASSERT_TRUE(WaitForNonZero(&it->state, 10));
   }
 
   // Start all of the dumpers at once, they will spin until they are signalled
@@ -609,7 +602,7 @@ TEST(libbacktrace, thread_multiple_dump) {
   android_atomic_acquire_store(1, &dump_now);
 
   for (size_t i = 0; i < NUM_THREADS; i++) {
-    ASSERT_TRUE(WaitForNonZero(&dumpers[i].done, 30));
+    ASSERT_TRUE(WaitForNonZero(&dumpers[i].done, 10));
 
     // Tell the runner thread to exit its infinite loop.
     android_atomic_acquire_store(0, &runners[i].state);
@@ -632,7 +625,7 @@ TEST(libbacktrace, thread_multiple_dump_same_thread) {
   ASSERT_TRUE(pthread_create(&runner.threadId, &attr, ThreadMaxRun, &runner) == 0);
 
   // Wait for tids to be set.
-  ASSERT_TRUE(WaitForNonZero(&runner.state, 30));
+  ASSERT_TRUE(WaitForNonZero(&runner.state, 10));
 
   // Start all of the dumpers at once, they will spin until they are signalled
   // to begin their dump run.
@@ -652,7 +645,7 @@ TEST(libbacktrace, thread_multiple_dump_same_thread) {
   android_atomic_acquire_store(1, &dump_now);
 
   for (size_t i = 0; i < NUM_THREADS; i++) {
-    ASSERT_TRUE(WaitForNonZero(&dumpers[i].done, 30));
+    ASSERT_TRUE(WaitForNonZero(&dumpers[i].done, 100));
 
     ASSERT_TRUE(dumpers[i].backtrace != NULL);
     VerifyMaxDump(dumpers[i].backtrace);
-- 
2.15.1

